{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./config.service\";\nexport let GeminiApiService = /*#__PURE__*/(() => {\n  class GeminiApiService {\n    constructor(http, configService) {\n      this.http = http;\n      this.configService = configService;\n      this.apiUrl = 'http://localhost:3000'; // Update with your backend URL\n    }\n\n    getHeaders() {\n      return this.configService.getApiKey().pipe(map(apiKey => new HttpHeaders().set('x-api-key', apiKey || '')));\n    }\n\n    createDbScript(scriptData) {\n      return this.getHeaders().pipe(switchMap(headers => this.http.post(`${this.apiUrl}/create-db-script`, scriptData, {\n        headers\n      })));\n    }\n\n    explainBuildFailure(buildLog) {\n      return this.getHeaders().pipe(switchMap(headers => this.http.post(`${this.apiUrl}/explain-build-failure`, {\n        buildLog\n      }, {\n        headers\n      })));\n    }\n\n    explainLogError(logError) {\n      return this.getHeaders().pipe(switchMap(headers => this.http.post(`${this.apiUrl}/explain-log-error`, {\n        logError\n      }, {\n        headers\n      })));\n    }\n\n  }\n\n  GeminiApiService.ɵfac = function GeminiApiService_Factory(t) {\n    return new (t || GeminiApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService));\n  };\n\n  GeminiApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GeminiApiService,\n    factory: GeminiApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return GeminiApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}